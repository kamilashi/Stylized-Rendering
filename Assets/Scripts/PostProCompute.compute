
#pragma kernel Outline
#pragma kernel SkewTexture
#pragma kernel DisortionAlongVelocity
#pragma kernel UnskewTexture
#pragma kernel CombineDistortiondMap

Texture2D<float4> source;
Texture2D<float4> outlineMap;
shared RWTexture2D<float4> outputOutline;

Texture2D<float4> distortionMap;
RWTexture2D<float4> skewedPreDistortion;
RWTexture2D<float4> outputPreDistortion; // to distorted
RWTexture2D<float4> unskewedPostDistortion;
RWTexture2D<float4> outputPostDistortion; // rename to combined

int2 screenResolution;

float outlineThreshold;
bool outlineMapView;

bool distortionMapView;
float skewAngleRadians;
int cameraVelocityMagnitude; 
int blurRadius; // temp
int2 blurAlongXY;
//float2 cameraVelocity;

uint2 translateXY;
float scale;

float modulo(float x, float y)
{
    return x - y * floor(x / y);
}

float inverseLerp(float a, float b, float v)
{
    return (v - a) / (b - a);
}

float remap(float iMin, float iMax, float oMin, float oMax, float v)
{
    float t = inverseLerp(iMin, iMax, v);
    return lerp(oMin, oMax, t);
}

bool withinScreen(uint2 id)
{
    if ((id.x < 0) ||
        (id.x >= screenResolution.x))
    {
        return false;
    }
    if ((id.y < 0) ||
        (id.y >= screenResolution.y))
    {
        return false;
    }
    return true;
}

uint2 clampWithinScreen(uint2 id)
{
    id.x = min(id.x, screenResolution.x);
    id.x = max(id.x, 0);
    id.y = min(id.y, screenResolution.y);
    id.y = max(id.y, 0);
    
    return id;
}

uint2 absV2(uint2 id)
{
    id.x = max(id.x, -id.x);
    id.y = max(id.y, -id.y);
    
    return id;
}

[numthreads(64, 16, 1)]
void Outline(uint3 id : SV_DispatchThreadID)
{
    float3 thisPixelColor = float3(outlineMap[id.xy].x, outlineMap[id.xy].y, outlineMap[id.xy].z);
    float4 thisPixel = outlineMap[id.xy];
    float4 thisPixelSource = source[id.xy];
    float outline = 0;
    
    float thisPixelColorLength = length(thisPixelColor);
    
    if ((thisPixelColorLength == 0) || (outlineMapView && !distortionMapView))
    {
        outputOutline[id.xy] = thisPixel;
        return;
    }
    
    uint2 lowerPixelId = uint2(id.x, (id.y + 1));
        
    if (withinScreen(lowerPixelId))
    {
        float3 lowerPixelColor = float3(outlineMap[lowerPixelId].x, outlineMap[lowerPixelId].y, outlineMap[lowerPixelId].z);
        float4 lowerPixel = outlineMap[lowerPixelId];
        if (abs(length(lowerPixelColor) - thisPixelColorLength) > outlineThreshold)
        {
            thisPixel = float4(0, 0, 0, 1);
            outline = 1;

        }
    }
    
    uint2 rightPixelId = uint2((id.x + 1), (id.y));
    if (withinScreen(rightPixelId))
    {
        float3 rightPixelColor = float3(outlineMap[rightPixelId].x, outlineMap[rightPixelId].y, outlineMap[rightPixelId].z);
        float4 rightPixel = outlineMap[rightPixelId];
        if (abs(length(rightPixelColor) - thisPixelColorLength) > outlineThreshold)
        {
            thisPixel = float4(0, 0, 0, 1);
            outline = 1;
        }
    }
    
    outputOutline[id.xy] = lerp(thisPixelSource, thisPixel, outline);
}

[numthreads(64, 16, 1)]
void SkewTexture(uint3 id : SV_DispatchThreadID)
{
    float4 thisPixelSource = distortionMap[id.xy];
    int2 skewedCoords = id.xy;
    
    //scale down/up
    skewedCoords *= scale;
        
    // translate
    skewedCoords += int2((translateXY.x), (translateXY.y));
    
    // shear (rotate)
    float shearX = tan(-skewAngleRadians);
    float shearY = tan(skewAngleRadians);
    float2x2 shearMatrix = float2x2(1, shearX, shearY, 1);
    skewedCoords = mul(shearMatrix, skewedCoords);
    
    //wrap around
    //the screen

    if (skewedCoords.x >= screenResolution.x || skewedCoords.x < 0)
    {
        skewedCoords.x = (int) modulo(skewedCoords.x, screenResolution.x);
    }
    if (skewedCoords.y >= screenResolution.y || skewedCoords.y < 0)
    {
        skewedCoords.y = (int) modulo(skewedCoords.y, screenResolution.y);
    }
    
    skewedPreDistortion[skewedCoords] = thisPixelSource;
    }

[numthreads(64, 16, 1)]
void DisortionAlongVelocity(uint3 id : SV_DispatchThreadID)
{
    //uint count = (uint) ceil(length(cameraVelocity));
    uint count = (uint) abs(blurRadius);
    
    //uint2 velocityOffset = (uint2) cameraVelocity;
    //float4 thisPixelSource = outputPreDistortion[id.xy];
    float4 thisPixelDistortion = distortionMap[id.xy];
    
    float hasDistortionTexture = thisPixelDistortion.w;
   // float weight = thisPixelDistortion.w;
    
    float4 currentPixel = float4(0,0,0,0);
    if ( cameraVelocityMagnitude * hasDistortionTexture > 0.0f)
    {
         [unroll(50)]
        for (int i = 1; i <= count*2 ; i++)
        {
            uint2 index = id.xy - uint2(count, count) + uint2(i * blurAlongXY.x, i * blurAlongXY.y);
            
            if (withinScreen(index))
            {
                currentPixel += distortionMap[index]; // * 2.0 * (1.0f - thisPixelDistortion.w);
                //weight *= thisPixelDistortion.w;
            }
        }
        clamp(currentPixel, 0.0f, 1.0f);
        currentPixel /= (count * 2);
        currentPixel.w = thisPixelDistortion.w * clamp(cameraVelocityMagnitude, 0, 1);
    }
    
    outputPreDistortion[id.xy] = currentPixel;
}

[numthreads(64, 16, 1)]
void UnskewTexture(uint3 id : SV_DispatchThreadID)
{
    float4 thisPixelSource = outputPreDistortion[id.xy];
    int2 skewedCoords = id.xy;
    
    // shear (rotate)
    float shearX = tan(skewAngleRadians);
    float shearY = tan(-skewAngleRadians);
    float2x2 shearMatrix = float2x2(1, shearX, shearY, 1);
    skewedCoords = mul(shearMatrix, skewedCoords);
    
    // translate
    skewedCoords += int2((-translateXY.x), (-translateXY.y));
        
    //scale down/up
    skewedCoords /= scale;
    skewedCoords = int2(skewedCoords);
    
    // wrap around the screen
    if (skewedCoords.x >= screenResolution.x || skewedCoords.x < 0)
    {
        skewedCoords.x = (int) modulo(skewedCoords.x, screenResolution.x);
    }
    if (skewedCoords.y >= screenResolution.y || skewedCoords.y < 0)
    {
        skewedCoords.y = (int) modulo(skewedCoords.y, screenResolution.y);
    }

    
    unskewedPostDistortion[skewedCoords] = thisPixelSource;
}

[numthreads(64, 16, 1)]
void CombineDistortiondMap(uint3 id : SV_DispatchThreadID)
{
    float4 thisPixelSource = outputOutline[id.xy];
    float4 thisPixelDistortion = outputPreDistortion[id.xy];
    float hasDistortionTexture = thisPixelDistortion.w; //(0): no billboard to distort; (1): has billboard to distort; 
    
    if (distortionMapView && !outlineMapView)
    {
        outputPostDistortion[id.xy] = thisPixelDistortion;
        return;
    }
    
    //float4 combined = lerp(thisPixelSource, thisPixelDistortion, hasDistortionTexture);
    float4 combined = thisPixelDistortion * thisPixelDistortion.w + (1 - thisPixelDistortion.w) * thisPixelSource;
    combined.w = 1;
    outputPostDistortion[id.xy] = combined;

}